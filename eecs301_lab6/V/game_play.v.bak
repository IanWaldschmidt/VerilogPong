//Justin Lee (jpl88) and Ian Waldschmidt(isw5)
//Game logic that dictates ball movement and scoring
module game_play(input clk, input [7:0] paddle1_pos, paddle2_pos,
				 output reg [3:0] p1_score, p2_score, output reg [8:0] ball_x, ball_y, output reg did_collide);
	
	reg [2:0] direction;		//Determines direction of ball movement; bit 0 is left, bit 1 is up, bit 2 is horizontal movement only
	reg [3:0] x_magnitude;		//Determines the angle; for every pixel of y movement, the ball will move this number of pixels horizontally
	reg [6:0] temp; 

	parameter BALL_RADIUS <= 4'd10;
	parameter PADDLE_WIDTH <= 4'd10;
	parameter PADDLE_HEIGHT <= 4'd50;	//Half the height, so the top of the paddle is center - height and bottom is center + height
	parameter PADDING <= 4'd10;
	reg [18:0] counter;

	initial begin
		p1_score <= 4'd0;
		p2_score <= 4'd0;
		ball_x <= 9'd240;		//Middle of the screen
		ball_y <= 9'd136;		//Middle of the screen
		did_collide <= 1'b0;
		direction <= 3'b101;	//Make the ball move horizontally left
		x_magnitude <= 4'b1;
		counter <= 0;
	end

	always @(posedge clk) begin
		counter <= counter + 1'b1;
		if(counter == 18'd524287) counter <= 0;
	end

	always @(posedge clk) begin
		//Check to see if the ball collided with the left paddle
		if(ball_x >= PADDING & ball_x <= PADDLE_WIDH + PADDING & ball_y + BALL_RADIUS >= paddle1_pos - PADDLE_HEIGHT & ball_y - BALL_RADIUS <= paddle1_pos + PADDLE_HEIGHT) begin
			//Change direction
			if(ball_y == paddle1_pos) direction <= 3'b001;
			else if(ball_y < paddle1_pos) begin
				temp <= paddle1_pos - ball_y;
				x_magnitude <= temp[6:3] + 1'b1;
				direction <= 3'b010;
			end
			else begin
				temp <= ball_y - paddle1_pos;
				x_magnitude <= temp[6:3] + 1'b1;
				direction <= 3'b000;
			end
		end
		//Check to see if the ball collided with the right paddle
		else if(ball_x <= 10'd480 - PADDING & ball_x >= 10'd480 - PADDLE_WIDH - PADDING & ball_y + BALL_RADIUS >= paddle2_pos - PADDLE_HEIGHT & ball_y - BALL_RADIUS <= paddle2_pos + PADDLE_HEIGHT) begin
			//Change direction
			if(ball_y == paddle2_pos) direction <= 3'b101;
			else if(ball_y < paddle2_pos) begin
				temp <= paddle2_pos - ball_y;
				x_magnitude <= temp[6:3] + 1'b1;
				direction <= 3'b110;
			end
			else begin
				temp <= ball_y - paddle2_pos;
				x_magnitude <= temp[6:3] + 1'b1;
				direction <= 3'b100;
			end
		end
		//Check to see if the ball collided with the ceiling or floor
		if(ball_y == BALL_RADIUS) direction[1] <= 0;
		else if(ball_y == 10'd272 - BALL_RADIUS) direction <= 1;
		//Check to see if someone scored
		if(ball_x < PADDING) begin
			p2_score <= p2_score + 1'b1;
			ball_x <= 9'd240;
			ball_y <= 9'd136;
			x_magnitude <= 4'b1;
			direction <= 3'b101;
		end
		else if(ball_x > 480 - PADDING) begin
			p1_score <= p1_score + 1'b1;
			ball_x <= 9'd240;
			ball_y <= 9'd136;
			x_magnitude <= 4'b1;
			direction <= 3'b001;
		end
	end

	always @(posedge counter[18]) begin
		//Move the ball vertically
		if(~direction[2] & ~direction[1]) ball_y <= ball_y + 1'b1;
		else if(~direction[2] & direction[1]) ball_y <= ball_y - 1'b1;
		//Move the ball horizontally
		if(~direction[0]) ball_x <= ball_x + x_magnitude;
		else ball_x <= ball_x - x_magnitude;
	end
endmodule
